package FaultToleranceDPSS;


/**
* FaultToleranceDPSS/DPSS_FTPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from FaultToleranceDPSS.idl
* Sunday, August 2, 2020 5:22:25 AM EDT
*/

public abstract class DPSS_FTPOA extends org.omg.PortableServer.Servant
 implements FaultToleranceDPSS.DPSS_FTOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("logIn", new java.lang.Integer (0));
    _methods.put ("createPlayerAccount", new java.lang.Integer (1));
    _methods.put ("logOut", new java.lang.Integer (2));
    _methods.put ("getPlayerUpdate", new java.lang.Integer (3));
    _methods.put ("suspendAccount", new java.lang.Integer (4));
    _methods.put ("transferAccount", new java.lang.Integer (5));
    _methods.put ("shutdown", new java.lang.Integer (6));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // FaultToleranceDPSS/DPSS_FT/logIn
       {
         String userName = in.read_string ();
         String Password = in.read_string ();
         String ipAddress = in.read_string ();
         boolean $result = false;
         $result = this.logIn (userName, Password, ipAddress);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 1:  // FaultToleranceDPSS/DPSS_FT/createPlayerAccount
       {
         String firstName = in.read_string ();
         String lastName = in.read_string ();
         int Age = in.read_long ();
         String userName = in.read_string ();
         String Password = in.read_string ();
         String IPAddress = in.read_string ();
         boolean $result = false;
         $result = this.createPlayerAccount (firstName, lastName, Age, userName, Password, IPAddress);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 2:  // FaultToleranceDPSS/DPSS_FT/logOut
       {
         String userName = in.read_string ();
         boolean $result = false;
         $result = this.logOut (userName);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 3:  // FaultToleranceDPSS/DPSS_FT/getPlayerUpdate
       {
         String adminId = in.read_string ();
         String $result[] = null;
         $result = this.getPlayerUpdate (adminId);
         out = $rh.createReply();
         FaultToleranceDPSS.ResultListHelper.write (out, $result);
         break;
       }

       case 4:  // FaultToleranceDPSS/DPSS_FT/suspendAccount
       {
         String adminId = in.read_string ();
         String adminPword = in.read_string ();
         String adminIp = in.read_string ();
         String suspendAccount = in.read_string ();
         boolean $result = false;
         $result = this.suspendAccount (adminId, adminPword, adminIp, suspendAccount);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 5:  // FaultToleranceDPSS/DPSS_FT/transferAccount
       {
         String userName = in.read_string ();
         String Password = in.read_string ();
         String oldIp = in.read_string ();
         String newIp = in.read_string ();
         boolean $result = false;
         $result = this.transferAccount (userName, Password, oldIp, newIp);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  //		string logIn(in string userName);
       case 6:  // FaultToleranceDPSS/DPSS_FT/shutdown
       {
         this.shutdown ();
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:FaultToleranceDPSS/DPSS_FT:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public DPSS_FT _this() 
  {
    return DPSS_FTHelper.narrow(
    super._this_object());
  }

  public DPSS_FT _this(org.omg.CORBA.ORB orb) 
  {
    return DPSS_FTHelper.narrow(
    super._this_object(orb));
  }


} // class DPSS_FTPOA
